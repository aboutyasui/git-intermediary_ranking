exit
traders.class
[].class
[.class]
4.class
Trader.all.class
traders.class
exit
 traders.pluck(:id)
 traders.count
arr = not_traders.each {|trader|  traders.push(trader)}
 traders = Trader.find(reviews)
arr = not_traders.each {|trader|  traders.push(trader)}
 not_traders = Trader.where.not(id: Review.group(:trader_id).order('avg(star) desc').pluck(:trader_id))
 traders = Trader.find(reviews).count
 traders = Trader.find(reviews)
arr.count
arr
exit
ids.flatten
ids
exit
traders.push(not_traders.pluck(:id)).flatten
traders.push(not_traders.pluck(:id))
traders = Trader.find(reviews).pluck(:id)
not_traders.pluck(:id)
not_traders.count
traders.push(not_traders)
traders = Trader.find(reviews).pluck(:id)
traders = Trader.find(reviews).count
traders = Trader.find(reviews)
traders.push(not_traders)class
traders.push(not_traders).clas
traders.push(not_traders)class
traders.push(not_traders).pluck(:id)
traders.push(not_traders).pluck():id
traders.push(not_traders).count
traders.push(not_traders)
traders.push(not_traders).pluck(:id)
traders.uniq.count
traders.pluck(:id)
traders.count
traders = Trader.find(reviews)
traders.count
not_traders.count
not_traders
traders.push(not_traders).count
traders.push(not_traders)
traders = Trader.find(reviews)
traders
traders.push(not_traders)
not_traders.count
not_traders
traders = Trader.find(reviews).count
traders = Trader.find(reviews)
Trader.all.count
Trader.all
Trader.find(19).reviews
Trader.select {|t| t.reviews.empty?}
Trader.select {|t| t.reviews.empty?}.count
Trader.select {|t| t.reviews.empty?}
Trader
Trader.all
Trader.aall
traders.count
traders
reviews.count
reviews
exit
Trader.where.not(id: [13, 15, 11, 12, 14, 1, 2, 3, 4, 5, 9, 10, 7, 8, 6])
Review.group(:trader_id).order('avg(star) desc').pluck(:trader_id).count
Review.group(:trader_id).order('avg(star) desc').pluck(:trader_id)
Review.group(:trader_id).order('avg(star) desc').pluck(:trader_id))
traders.count
traders.pluck(:id)
traders.pluck(:trader_id)
traders
traders.pluck(:trader_id
traders.pluck[:id]
traders
exit
traders
